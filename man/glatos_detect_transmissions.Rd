% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glatos_detect_transmissions.R
\name{glatos_detect_transmissions}
\alias{glatos_detect_transmissions}
\title{Simulate detection of transmitter signals in a receiver network}
\usage{
glatos_detect_transmissions(trnsLoc = NA, recLoc = NA,
  detRngFun = NA, pb = FALSE)
}
\arguments{
\item{trnsLoc}{A three-column data frame with locations (numeric columns 
named 'x' and 'y') and timestamps (numeric or POSIXct column named 'et')
where signals were transmitted.}

\item{recLoc}{A two-column data frame with receiver locations (numeric 
columns named 'x' and 'y')}

\item{detRngFun}{A function that defines detection range curve;
must accept a numeric vector of distances and return a numeric vector of 
detection probabilities at each distance.}
}
\value{
A data frame containing:
\item{trns_id}{Unique signal transmission ID}
\item{recv_id}{Unique receiver ID}
\item{recv_x}{Receiver x coordinate}
\item{recv_y}{Receiver y coordinate}
\item{trns_x}{Transmitter x coordinate}
\item{trns_y}{Transmitter y coordinate}
\item{etime}{Elapsed time}
}
\description{
Simulates detection of transmitter signals in a receiver network based on
  detection range curve (detection probability as a function of distance),
  location of transmitter, and location of receivers.
}
\details{
Distances between each signal transmission location and receiver are 
calculated using pythagorean theorem. The probability of detecting each 
signal on each receiver is determined from the detection range curve. 
Detection of each signal on each receiver is determined stochastically by 
draws from a Bernoulli distribution with probability p (detection prob).  
 
This function was written to be used along with 
  \code{\link{transmit_along_path}}.
}
\examples{
#make a simple path in polygon
mypath <- crw_in_polygon(data.frame(x = c(0, 0, 1000, 1000), 
  y = c(0, 1000, 1000, 0)), stepLen=100, nsteps=50)
plot(mypath,type='l',xlim=c(0,1000),ylim=c(0,1000)) #view path

#add receivers
recs <- expand.grid(c(250,750),c(250,750))
names(recs) <- c("x","y") #needed by detect_transmissions
points(recs, pch=15, col="blue")

#simulate tag transmissions
mytrns <- transmit_along_path(mypath,vel=2.0,delayRng=c(60,180),burstDur=5.0)
points(mytrns,pch=21) #add to plot

#Define detection range function (to pass as detRngFun) 
# that returns detection probability for given distance
# assume logistic form of detection range curve where 
#   dm = distance in meters
#   b = intercept and slope
pdrf <- function(dm, b=c(0.5, -1/120)){
  p <- 1/(1+exp(-(b[1]+b[2]*dm)))
  return(p)
}
pdrf(c(100,200,300,400,500)) #view detection probs. at some distances

#simulate detection
mydtc <- detect_transmissions(trnsLoc=mytrns, recLoc=recs, detRngFun=pdrf)
#view transmissions that were detected
points(trns_y~trns_x, data=mydtc,pch=21, bg="red")

}
\seealso{
\code{\link{transmit_along_path}} to simulate transmissions along a 
path (i.e., create \code{trnsLoc}).

Modified by Ian Jonsen from
}
\author{
C. Holbrook (cholbrook@usgs.gov)
}
